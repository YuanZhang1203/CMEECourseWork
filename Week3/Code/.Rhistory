ls()
ls()
q(
q()
q()
install.packages("dplyr")
require(dplyr)
dplyr::tbl_df(MyWrangledData)
library(dplyr)
install.packages("ddply")
library(Lahman)
install.packages("plyr")
library(Lahman)
install.packages(c("ggplot2","plyr","reshape2"))
par(mfcol=c(2,1)) #initialize multi-paneled plot
par(mfg = c(1,1)) # specify which sub-plot to use first
hist(log10(MyDF$Predator.mass),
xlab = "log10(Predator Mass (g))", ylab = "Count", col = "lightblue", border = "pink",
main = 'Predator') # Add title
par(mfg = c(2,1)) # Second sub-plot
hist(log10(MyDF$Prey.mass), xlab="log10(Prey Mass (g))",ylab="Count", col = "lightgreen", border = "pink", main = 'prey')
hist(log10(MyDF$Predator.mass), # Predator histogram
xlab="log10(Body Mass (g))", ylab="Count",
col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
main = "Predator-prey size Overlap")
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = T) # Plot prey
legend('topleft',c('Predators','Prey'),   # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) # Define legend colors
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
setwd("CMEECourseWork/Week3/Code/")
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
require(dplyr)
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
require(reshape2
)
install.packages(c("ggplot2","plyr","reshape2"))
install.packages(c("ggplot2", "plyr", "reshape2"))
require(reshape2)
install.packages("reshape2")
install.packages("reshape2")
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
load("/Users/changjiu/CMEECourseWork/Week3/Data/KeyWestAnnualMeanTemperature.RData")
View(MyMetaData)
View(MyData)
source('~/CMEECourseWork/Week3/Code/DataWrangTidy.R')
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
library(lattice)
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
str(MyDF)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
pdf("../results/Pred_Lattice.pdf")
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
pdf("../results/Pred_Lattice.pdf")
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
pdf("../results/Pred_Lattice.pdf")
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
pdf("../results/Pred_Lattice.pdf")
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
pdf("../results/Pred_Lattice.pdf", 11.7, 8.3)
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../results/Prey_Lattice.pdf", 11.7, 8.3)
library(lattice)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../results/SizeRatio_Lattice.pdf", 11.7, 8.3)
library(lattice)
densityplot(~SizeRatio | Type.of.feeding.interaction, data=MyDF)
dev.off()
MyDF = MyDF %>%
mutate(PreMyDFor.mass.log = log(PreMyDFor.mass),
Prey.mass.log = log(Prey.mass),
SizeRatio = Prey.mass / PreMyDFor.mass)
MyDF = MyDF %>%
mutate(Predator.mass.log = log(Predator.mass),
Prey.mass.log = log(Prey.mass),
SizeRatio = Prey.mass / Predator.mass)
pdf("../results/SizeRatio_Lattice.pdf", 11.7, 8.3)
library(lattice)
densityplot(~SizeRatio | Type.of.feeding.interaction, data=MyDF)
dev.off()
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
library(dplyr)
library(lattice)
# load MyDFa
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv",header = T, sep=",", stringsAsFactors = F)
# create variables
MyDF = MyDF %>%
mutate(Predator.mass.log = log(Predator.mass),
Prey.mass.log = log(Prey.mass),
SizeRatio = Prey.mass / Predator.mass)
# make lattice plots
pdf("../results/Pred_Lattice.pdf", 11.7, 8.3)
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
source('~/CMEECourseWork/Week3/Code/PP_Lattice.R')
library(dplyr)
library(lattice)
# load MyDFa
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv",header = T, sep=",", stringsAsFactors = F)
# create variables
MyDF = MyDF %>%
mutate(Predator.mass.log = log(Predator.mass),
Prey.mass.log = log(Prey.mass),
SizeRatio = Prey.mass / Predator.mass)
# make lattice plots
pdf("../results/Pred_Lattice.pdf", 11.7, 8.3)
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../results/Prey_Lattice.pdf", 11.7, 8.3)
library(lattice)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../results/SizeRatio_Lattice.pdf", 11.7, 8.3)
library(lattice)
densityplot(~SizeRatio | Type.of.feeding.interaction, data=MyDF)
dev.off()
library(dplyr)
library(lattice)
# load MyDFa
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv",header = T, sep=",", stringsAsFactors = F)
# create variables
MyDF = MyDF %>%
mutate(Predator.mass.log = log(Predator.mass),
Prey.mass.log = log(Prey.mass),
SizeRatio = Prey.mass / Predator.mass)
# make lattice plots
pdf("../results/Pred_Lattice.pdf", 11.7, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../results/Prey_Lattice.pdf", 11.7, 8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../results/SizeRatio_Lattice.pdf", 11.7, 8.3)
densityplot(~SizeRatio | Type.of.feeding.interaction, data=MyDF)
dev.off()
require(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
require(ggplot2)
qplot(Prey.mass, Predator.mass, data = MyDF)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction)
qplot(log(Prey.mass), log(Predator.mass),
data = MyDF, colour = "red")
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "histogram")
p <- ggplot(MyDF, aes(x = log(Predator.mass),
y = log(Prey.mass),
colour = Type.of.feeding.interaction))
p
source('~/CMEECourseWork/Week3/Code/Girko.R')
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
file.create("MyBars.R")
source('~/CMEECourseWork/Week3/Code/MyBars.R')
source('~/CMEECourseWork/Week3/Code/MyBars.R')
file.create("plotLin.R")
source('~/CMEECourseWork/Week3/Code/plotLin.R')
source('~/CMEECourseWork/Week3/Code/plotLin.R')
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
rnorm(length(x), mean = 0., sd = 2.5)
# and put them in a dataframe
my_data <- data.frame(x = x, y = y)
# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point() +
scale_colour_gradient(low = "black", high = "red") +
theme(legend.position = "none") +
scale_x_continuous(
expression(alpha^2 * pi / beta * sqrt(Theta)))
# add the regression line
p <- p + geom_abline(
intercept = my_lm$coefficients[1][1],
slope = my_lm$coefficients[2][1],
colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
p
source('~/CMEECourseWork/Week3/Code/plotLin.R')
source('~/CMEECourseWork/Week3/Code/PP_Regress.R')
source('~/CMEECourseWork/Week3/Code/PP_Regress.R')
source('~/CMEECourseWork/Week3/Code/GPDD_Data.R')
source('~/CMEECourseWork/Week3/Code/PP_Regress_loc.R')
library(maps)
load(file = "../Data/GPDDFiltered.RData")
map("world")
points(gpdd$long, gpdd$lat, pch=3, col="red")
pdf("../results/GPDD_map.pdf", 11.7, 8.3)
dev.off()
library(maps)
load(file = "../Data/GPDDFiltered.RData")
map("world")
points(gpdd$long, gpdd$lat, pch=3, col="red")
pdf("../results/GPDD_map.pdf", 11.7, 8.3)
print
dev.off()
source('~/CMEECourseWork/Week3/Code/GPDD_Data.R')
library(maps)
load(file = "../Data/GPDDFiltered.RData")
pdf("../results/GPDD_map.pdf", 11.7, 8.3)
map("world")
points(gpdd$long, gpdd$lat, pch=3, col="red")
dev.off()
source('~/CMEECourseWork/Week3/Code/PP_Regress.R')
source('~/CMEECourseWork/Week3/Code/DataWrangTidy.R')
source('~/CMEECourseWork/Week3/Code/Vectorize2.R')
source('~/CMEECourseWork/Week3/Code/Vectorize1.R')
source('~/CMEECourseWork/Week3/Code/TAutoCorr.R')
View(ats)
load("../Data/KeyWestAnnualMeanTemperature.RData")
plot(ats$Year, ats$Temp, pch = 16)
lines(ats$Year, ats$Temp)
load("../Data/KeyWestAnnualMeanTemperature.RData")
plot(ats$Year, ats$Temp, pch = 16)
load("../Data/KeyWestAnnualMeanTemperature.RData")
plot(ats$Year, ats$Temp) #plot data
lines(ats$Year, ats$Temp) #add lines
> load("../Data/KeyWestAnnualMeanTemperature.RData")
> plot(ats$Year, ats$Temp) #plot data
load("../Data/KeyWestAnnualMeanTemperature.RData")
plot(ats$Year, ats$Temp) #plot data
n = nrow(ats)
c0 = cor(ats$Temp[1:(n-1)], ats$Temp[2:n])
View(ats)
View(c)
man cor()
cor()
help cor()
View(ats)
load("../Data/KeyWestAnnualMeanTemperature.RData")
plot(ats$Year, ats$Temp, pch = 16) #plot data
lines(ats$Year, ats$Temp) #add lines
n = nrow(ats)
c2 = cor(ats$Temp[n], ats$Temp[n+1])
source('~/CMEECourseWork/Week3/Code/TAutoCorr.R')
source('~/CMEECourseWork/Week3/Code/get_TreeHeight.R')
library(dplyr)
args <- commandArgs()
InputFileName=args[6]
OutputFileName=gsub("^.*/", "", InputFileName)
OutputFileName=gsub("\\.csv", "", OutputFileName)
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
source('~/CMEECourseWork/Week3/Code/get_TreeHeight.R')
source('~/CMEECourseWork/Week3/Code/DataWrang.R')
source('~/CMEECourseWork/Week3/Code/DataWrang.R')
source('~/CMEECourseWork/Week3/Code/DataWrang.R')
source('~/CMEECourseWork/Week3/Code/DataWrangTidy.R')
source('~/CMEECourseWork/Week3/Code/PP_Regress.R')
